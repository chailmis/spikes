/*******************************************************************************
 * Copyright 2012-present Pixate, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/* The following code was generated by JFlex 1.4.3 on 1/3/14 1:37 PM */

// java -jar JFlex.jar CSS.flex

package com.pixate.freestyle.styling.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.Stack;

import com.pixate.freestyle.cg.math.PXDimension;
import com.pixate.freestyle.parsing.Lexeme;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/3/14 1:37 PM from the specification file
 * <tt>CSS.flex</tt>
 */
class PXStylesheetLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\20\1\0\1\10\1\17\22\0\1\16\1\75\1\11"+
    "\1\57\1\30\1\102\1\0\1\7\1\46\1\56\1\22\1\13\1\114"+
    "\1\12\1\14\1\21\12\1\1\103\1\112\1\0\1\4\1\113\1\0"+
    "\1\60\1\31\1\53\1\70\1\32\1\37\1\67\1\43\1\50\1\36"+
    "\1\2\1\72\1\34\1\62\1\24\1\66\1\64\1\2\1\41\1\52"+
    "\1\45\1\55\1\105\1\2\1\77\1\74\1\101\1\110\1\3\1\111"+
    "\1\27\1\6\1\0\1\31\1\53\1\70\1\32\1\37\1\67\1\42"+
    "\1\47\1\35\1\5\1\71\1\33\1\61\1\23\1\65\1\63\1\5"+
    "\1\40\1\51\1\44\1\54\1\104\1\5\1\76\1\73\1\100\1\106"+
    "\1\26\1\107\1\25\1\0\200\2\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\2\1\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\2\1\3\3\1\14\2\3\1\15\3\1\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\0"+
    "\1\11\6\26\1\27\4\26\1\30\3\0\1\31\2\0"+
    "\1\11\1\2\1\32\3\0\1\33\1\34\1\35\1\36"+
    "\1\37\6\3\1\40\25\0\1\41\1\0\2\26\1\42"+
    "\1\43\1\44\2\26\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\26\3\0\1\54\6\3\31\0\1\55"+
    "\1\56\1\57\1\26\1\60\1\5\3\3\1\61\1\3"+
    "\1\62\1\3\1\63\33\0\1\64\2\3\1\65\1\66"+
    "\1\67\1\70\7\0\1\71\4\0\1\72\3\0\1\73"+
    "\10\0\2\3\2\0\1\74\6\0\1\75\1\0\1\76"+
    "\3\0\1\77\1\0\1\100\3\0\1\101\2\0\2\3"+
    "\1\0\1\102\6\0\1\103\4\0\1\104\1\105\5\0"+
    "\2\3\12\0\1\106\5\0\1\107\1\110\2\3\20\0"+
    "\2\3\1\111\1\112\1\113\1\114\14\0\2\3\3\0"+
    "\1\115\1\0\1\116\2\0\1\117\1\120\3\0\2\3"+
    "\10\0\1\121\2\3\2\0\1\122\1\123\1\0\1\124"+
    "\1\125\1\0\2\3\2\0\1\126\1\127\2\3\2\0"+
    "\1\130\1\131\1\0\1\132\1\0\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\115\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\347\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\115\0\u0604"+
    "\0\u0651\0\115\0\u069e\0\u06eb\0\u0738\0\u0785\0\115\0\115"+
    "\0\115\0\115\0\115\0\115\0\115\0\u07d2\0\u081f\0\u086c"+
    "\0\u08b9\0\u07d2\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87"+
    "\0\u07d2\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\115\0\u0134\0\u0181"+
    "\0\u0c08\0\115\0\u021b\0\u0c55\0\115\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\u0d89\0\u0dd6\0\115\0\115\0\115\0\115\0\115\0\u0e23"+
    "\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\u069e\0\u0ff1\0\u103e"+
    "\0\u108b\0\u10d8\0\u1125\0\u1172\0\u0738\0\u11bf\0\u120c\0\u1259"+
    "\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1"+
    "\0\u150e\0\u155b\0\u15a8\0\115\0\u15f5\0\u1642\0\u168f\0\u07d2"+
    "\0\u07d2\0\u07d2\0\u16dc\0\u1729\0\u07d2\0\u07d2\0\u07d2\0\u07d2"+
    "\0\u07d2\0\u07d2\0\u07d2\0\u1776\0\u17c3\0\u1810\0\u185d\0\347"+
    "\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d"+
    "\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95"+
    "\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u07d2"+
    "\0\u07d2\0\u07d2\0\u21fd\0\u07d2\0\115\0\u224a\0\u2297\0\u22e4"+
    "\0\115\0\u2331\0\115\0\u237e\0\115\0\u23cb\0\u2418\0\u2465"+
    "\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd"+
    "\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935"+
    "\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d"+
    "\0\u07d2\0\u2bea\0\u2c37\0\115\0\115\0\115\0\115\0\u2c84"+
    "\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\115\0\u2e9f"+
    "\0\u2eec\0\u2f39\0\u2f86\0\115\0\u2fd3\0\u3020\0\u306d\0\115"+
    "\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u32d5"+
    "\0\u3322\0\u336f\0\u33bc\0\u3409\0\115\0\u3456\0\u34a3\0\u34f0"+
    "\0\u353d\0\u358a\0\u35d7\0\115\0\u3624\0\115\0\u3671\0\u36be"+
    "\0\u370b\0\115\0\u3758\0\115\0\u37a5\0\u37f2\0\u383f\0\115"+
    "\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0\0\115\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\115\0\u3bdb\0\u3c28\0\u3c75"+
    "\0\u3cc2\0\115\0\115\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43"+
    "\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab"+
    "\0\u40f8\0\u4145\0\u4192\0\u41df\0\115\0\u422c\0\u4279\0\u42c6"+
    "\0\u4313\0\u4360\0\115\0\115\0\u43ad\0\u43fa\0\u4447\0\u4494"+
    "\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af\0\u46fc"+
    "\0\u4749\0\u4796\0\u47e3\0\u4830\0\u487d\0\u48ca\0\u4917\0\u4964"+
    "\0\115\0\115\0\115\0\115\0\u49b1\0\u49fe\0\u4a4b\0\u4a98"+
    "\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3\0\u4d00"+
    "\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81\0\115\0\u4ece\0\115"+
    "\0\u4f1b\0\u4f68\0\115\0\115\0\u4fb5\0\u5002\0\u504f\0\u509c"+
    "\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d\0\u526a\0\u52b7\0\u5304"+
    "\0\u5351\0\115\0\u539e\0\u53eb\0\u5438\0\u5485\0\115\0\115"+
    "\0\u54d2\0\115\0\115\0\u551f\0\u556c\0\u55b9\0\u5606\0\u5653"+
    "\0\115\0\115\0\u56a0\0\u56ed\0\u573a\0\u5787\0\115\0\115"+
    "\0\u57d4\0\115\0\u5821\0\115";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\4\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\10\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\4\2\25"+
    "\3\4\2\26\4\4\1\27\2\30\3\4\2\31\1\32"+
    "\1\33\1\34\14\4\1\35\4\4\1\2\1\36\2\4"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\116\0"+
    "\1\3\1\46\1\47\1\0\1\46\4\0\1\50\1\0"+
    "\1\51\6\0\2\52\4\0\1\46\1\53\2\46\2\54"+
    "\1\55\2\56\2\57\2\46\1\0\2\60\2\61\3\46"+
    "\3\0\2\62\2\63\3\46\1\64\2\65\2\46\1\0"+
    "\4\46\1\66\1\0\2\46\10\0\2\4\1\67\1\0"+
    "\2\4\3\0\1\4\10\0\2\4\4\0\15\4\1\0"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\0\1\4\7\0\1\4\1\0\1\4\5\0"+
    "\2\4\3\0\2\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\2\0\1\4\1\0"+
    "\2\4\1\0\1\4\4\0\1\4\1\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\1\4\1\0"+
    "\1\4\3\0\1\4\7\0\3\70\1\71\3\70\1\72"+
    "\1\0\6\70\2\0\74\70\10\0\1\10\4\0\4\10"+
    "\74\0\3\73\1\74\4\73\1\0\1\72\5\73\2\0"+
    "\74\73\1\0\1\3\1\4\1\67\1\0\1\4\6\0"+
    "\1\51\6\0\2\17\4\0\15\4\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\1\3\12\0"+
    "\1\51\6\0\2\75\71\0\1\76\1\77\1\100\1\0"+
    "\1\77\4\0\1\101\10\0\2\77\4\0\15\77\1\0"+
    "\7\77\3\0\14\77\1\0\4\77\2\0\2\77\31\0"+
    "\1\102\76\0\1\103\114\0\1\104\114\0\1\105\114\0"+
    "\1\106\114\0\1\107\111\0\2\4\1\67\1\0\2\4"+
    "\3\0\1\4\10\0\2\110\4\0\15\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\4\4\2\111\7\4\1\0\7\4\3\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\4\1\67\1\0\2\4"+
    "\3\0\1\4\10\0\2\4\4\0\1\112\10\4\2\113"+
    "\2\4\1\0\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\15\4\1\0\2\4\2\114\3\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\7\4\2\115\4\4\1\0\7\4\3\0\14\4\1\0"+
    "\4\4\2\0\2\4\10\0\2\116\1\117\1\0\2\116"+
    "\3\0\1\116\10\0\2\116\4\0\15\116\1\0\7\116"+
    "\3\0\14\116\1\0\4\116\2\0\2\116\32\0\2\120"+
    "\10\0\2\121\22\0\2\122\4\0\1\123\1\0\2\124"+
    "\32\0\1\125\4\0\4\125\1\126\13\0\2\127\101\0"+
    "\2\130\4\0\1\131\1\0\2\132\2\133\1\134\2\135"+
    "\2\0\2\136\1\0\2\137\2\0\1\140\11\0\2\141"+
    "\1\142\1\143\12\0\1\144\2\145\10\0\2\46\1\47"+
    "\1\0\1\46\15\0\2\46\4\0\15\46\1\0\7\46"+
    "\3\0\14\46\1\0\4\46\2\0\2\46\10\0\2\46"+
    "\1\0\1\46\7\0\1\46\1\0\1\46\5\0\2\46"+
    "\3\0\2\46\1\0\1\46\1\0\2\46\1\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\0\1\46\1\0\2\46"+
    "\1\0\1\46\4\0\1\46\1\0\1\46\1\0\3\46"+
    "\1\0\1\46\1\0\1\46\2\0\1\46\1\0\1\46"+
    "\3\0\1\46\11\0\1\46\1\47\1\0\1\46\15\0"+
    "\2\46\4\0\15\46\1\0\7\46\3\0\14\46\1\0"+
    "\4\46\2\0\2\46\10\0\1\76\114\0\2\46\1\47"+
    "\1\0\1\46\15\0\2\46\4\0\6\46\1\146\6\46"+
    "\1\0\7\46\3\0\2\46\2\147\10\46\1\0\4\46"+
    "\2\0\2\46\10\0\2\46\1\47\1\0\1\46\15\0"+
    "\2\150\4\0\15\46\1\0\7\46\3\0\14\46\1\0"+
    "\4\46\2\0\2\46\10\0\2\46\1\47\1\0\1\46"+
    "\15\0\2\46\4\0\15\46\1\0\7\46\3\0\2\151"+
    "\12\46\1\0\2\152\2\46\2\0\2\46\10\0\2\46"+
    "\1\47\1\0\1\46\15\0\2\46\4\0\1\153\14\46"+
    "\1\0\7\46\3\0\14\46\1\0\4\46\2\0\2\46"+
    "\10\0\2\46\1\47\1\0\1\46\15\0\2\46\4\0"+
    "\7\46\2\154\4\46\1\0\7\46\3\0\14\46\1\0"+
    "\4\46\2\0\2\46\10\0\2\46\1\47\1\0\1\46"+
    "\15\0\2\46\4\0\15\46\1\0\7\46\3\0\14\46"+
    "\1\0\2\46\2\155\2\0\2\46\10\0\2\46\1\47"+
    "\1\0\1\46\15\0\2\46\4\0\15\46\1\0\2\46"+
    "\2\156\3\46\3\0\2\157\12\46\1\0\4\46\2\0"+
    "\2\46\10\0\2\46\1\47\1\0\1\46\15\0\2\46"+
    "\4\0\13\46\2\160\1\0\7\46\3\0\7\46\1\161"+
    "\4\46\1\0\2\162\2\46\2\0\2\46\10\0\2\46"+
    "\1\47\1\0\1\46\15\0\2\46\4\0\15\46\1\0"+
    "\7\46\3\0\2\163\12\46\1\0\4\46\2\0\2\46"+
    "\10\0\2\46\1\47\1\0\1\46\15\0\2\46\4\0"+
    "\15\46\1\0\2\164\5\46\3\0\14\46\1\0\4\46"+
    "\2\0\2\46\7\0\3\70\1\71\3\70\1\72\7\70"+
    "\1\165\75\70\3\73\1\74\5\73\1\72\5\73\1\166"+
    "\75\73\1\0\1\76\1\46\1\47\1\0\1\46\4\0"+
    "\1\50\10\0\2\46\4\0\1\46\1\53\2\46\2\54"+
    "\1\55\2\56\2\57\2\46\1\0\2\60\2\61\3\46"+
    "\3\0\2\62\2\63\3\46\1\64\2\65\2\46\1\0"+
    "\4\46\1\66\1\0\2\46\10\0\2\77\1\100\1\0"+
    "\2\77\3\0\1\77\10\0\2\77\4\0\15\77\1\0"+
    "\7\77\3\0\14\77\1\0\4\77\2\0\2\77\10\0"+
    "\2\77\1\0\1\77\7\0\1\77\1\0\1\77\5\0"+
    "\2\77\3\0\2\77\1\0\1\77\1\0\2\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\2\0\1\77\1\0"+
    "\2\77\1\0\1\77\4\0\1\77\1\0\1\77\1\0"+
    "\3\77\1\0\1\77\1\0\1\77\2\0\1\77\1\0"+
    "\1\77\3\0\1\77\11\0\1\77\1\100\1\0\1\77"+
    "\15\0\2\77\4\0\15\77\1\0\7\77\3\0\14\77"+
    "\1\0\4\77\2\0\2\77\7\0\22\102\1\167\72\102"+
    "\1\0\2\4\1\67\1\0\2\4\3\0\1\4\10\0"+
    "\2\4\4\0\1\4\1\170\13\4\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\171\4\0\15\4"+
    "\1\0\7\4\3\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\2\4\1\67\1\0\2\4\3\0\1\4\10\0"+
    "\2\4\4\0\1\4\1\172\13\4\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\15\4"+
    "\1\0\4\4\1\173\2\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\2\4\2\174\11\4\1\0"+
    "\4\4\1\175\2\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\2\4\2\176\11\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\116"+
    "\1\0\1\116\7\0\1\116\1\0\1\116\5\0\2\116"+
    "\3\0\2\116\1\0\1\116\1\0\2\116\1\0\1\116"+
    "\1\0\1\116\1\0\1\116\2\0\1\116\1\0\2\116"+
    "\1\0\1\116\4\0\1\116\1\0\1\116\1\0\3\116"+
    "\1\0\1\116\1\0\1\116\2\0\1\116\1\0\1\116"+
    "\3\0\1\116\40\0\1\177\144\0\2\200\71\0\1\201"+
    "\142\0\2\202\65\0\1\203\77\0\1\204\153\0\2\205"+
    "\76\0\2\206\17\0\2\207\115\0\1\210\1\211\55\0"+
    "\1\212\3\0\2\213\101\0\2\214\113\0\2\215\34\0"+
    "\2\216\117\0\2\217\57\0\1\220\150\0\2\221\65\0"+
    "\1\222\100\0\2\223\125\0\2\224\26\0\2\225\75\0"+
    "\2\226\101\0\2\227\57\0\2\46\1\47\1\0\1\46"+
    "\15\0\2\46\4\0\11\46\2\230\2\46\1\0\7\46"+
    "\3\0\14\46\1\0\4\46\2\0\2\46\10\0\2\46"+
    "\1\47\1\0\1\46\15\0\2\46\4\0\15\46\1\0"+
    "\7\46\3\0\14\46\1\0\2\231\2\46\2\0\2\46"+
    "\10\0\2\46\1\47\1\0\1\46\15\0\2\46\4\0"+
    "\1\46\1\232\13\46\1\0\7\46\3\0\14\46\1\0"+
    "\4\46\2\0\2\46\10\0\2\46\1\47\1\0\1\46"+
    "\15\0\2\46\4\0\1\233\14\46\1\0\7\46\3\0"+
    "\14\46\1\0\4\46\2\0\2\46\10\0\2\46\1\47"+
    "\1\0\1\46\15\0\2\46\4\0\15\46\1\0\7\46"+
    "\3\0\14\46\1\0\2\46\2\234\2\0\2\46\7\0"+
    "\3\70\1\71\3\70\1\72\1\0\6\70\1\0\75\70"+
    "\3\73\1\74\4\73\1\0\1\72\5\73\1\0\75\73"+
    "\21\102\1\235\1\167\72\102\1\0\2\4\1\67\1\0"+
    "\2\4\3\0\1\4\10\0\2\4\4\0\6\4\1\236"+
    "\6\4\1\0\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\4\4\2\237\7\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\240\14\4\1\241\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\1\242\14\4\1\243\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\244\14\4\1\245\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\15\4\1\246\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\70\0\2\247\115\0"+
    "\2\250\62\0\1\251\105\0\2\252\163\0\2\253\20\0"+
    "\22\204\1\254\72\204\63\0\2\255\77\0\2\256\110\0"+
    "\2\257\113\0\2\260\113\0\2\261\72\0\2\262\24\0"+
    "\2\263\65\0\2\264\122\0\1\265\113\0\1\266\146\0"+
    "\2\267\115\0\2\270\66\0\2\271\157\0\2\272\76\0"+
    "\1\273\60\0\2\274\120\0\2\275\143\0\1\276\63\0"+
    "\1\277\126\0\2\300\43\0\2\46\1\47\1\0\1\46"+
    "\15\0\2\46\4\0\1\46\1\301\13\46\1\0\7\46"+
    "\3\0\14\46\1\0\4\46\2\0\2\46\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\302\14\4\1\0\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\1\303\14\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\15\4\1\304\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\10\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\15\4\1\305\7\4\3\0\14\4"+
    "\1\0\4\4\2\0\2\4\10\0\2\4\1\67\1\0"+
    "\2\4\3\0\1\4\10\0\2\4\4\0\15\4\1\306"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\7\0"+
    "\56\246\1\307\36\246\37\0\1\310\142\0\2\311\63\0"+
    "\2\312\122\0\2\313\136\0\1\314\25\0\21\204\1\125"+
    "\1\254\72\204\65\0\2\315\40\0\1\316\150\0\1\317"+
    "\105\0\1\320\112\0\2\321\120\0\2\322\115\0\2\323"+
    "\140\0\2\324\61\0\1\325\130\0\1\326\105\0\2\327"+
    "\113\0\2\330\111\0\2\331\110\0\1\332\142\0\2\333"+
    "\121\0\2\334\71\0\2\335\116\0\2\336\127\0\1\337"+
    "\61\0\2\340\57\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\7\4\2\341\4\4\1\0"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\2\4\3\0\1\4\10\0\2\4"+
    "\4\0\2\4\2\342\11\4\1\0\7\4\3\0\14\4"+
    "\1\0\4\4\2\0\2\4\60\0\2\343\102\0\2\344"+
    "\104\0\1\345\75\0\1\346\142\0\2\347\113\0\2\350"+
    "\106\0\2\351\30\0\2\352\1\0\1\353\64\0\2\354"+
    "\157\0\2\355\55\0\1\356\60\0\1\357\146\0\2\360"+
    "\102\0\2\361\153\0\2\362\57\0\1\363\115\0\2\364"+
    "\113\0\2\365\65\0\1\366\146\0\2\367\120\0\2\370"+
    "\133\0\2\371\66\0\2\372\50\0\2\4\1\67\1\0"+
    "\2\4\3\0\1\373\10\0\2\4\4\0\15\4\1\0"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\2\4\3\0\1\374\10\0\2\4"+
    "\4\0\15\4\1\0\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\72\0\2\375\74\0\2\376\136\0\1\377"+
    "\56\0\1\u0100\127\0\2\u0101\100\0\1\u0102\152\0\1\u0103"+
    "\74\0\2\u0104\103\0\1\u0105\142\0\2\u0106\1\0\1\u0107"+
    "\63\0\1\u0108\114\0\1\u0109\121\0\2\u010a\106\0\1\u010b"+
    "\142\0\2\u010c\1\0\1\u010d\36\0\1\u010e\141\0\1\u010f"+
    "\114\0\1\u0110\56\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\11\4\2\u0111\2\4\1\0"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\10\0"+
    "\2\4\1\67\1\0\2\4\3\0\1\4\10\0\2\4"+
    "\4\0\11\4\2\u0112\2\4\1\0\7\4\3\0\14\4"+
    "\1\0\4\4\2\0\2\4\40\0\1\u0113\114\0\1\u0114"+
    "\144\0\2\u0115\63\0\1\u0116\134\0\2\u0117\54\0\1\u0118"+
    "\137\0\2\u0119\145\0\1\u011a\74\0\2\u011b\104\0\2\u011c"+
    "\105\0\1\u011d\151\0\1\u011e\74\0\2\u011f\77\0\2\u0120"+
    "\30\0\2\u0121\1\0\1\u0122\56\0\1\u0123\114\0\1\u0124"+
    "\63\0\2\4\1\67\1\0\2\4\3\0\1\4\10\0"+
    "\2\4\4\0\7\4\2\u0125\4\4\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\7\4"+
    "\2\u0126\4\4\1\0\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\77\0\1\u0127\114\0\1\u0128\63\0\1\u0129"+
    "\100\0\2\u012a\134\0\2\u012b\113\0\2\u012c\102\0\2\u012d"+
    "\72\0\1\u012e\137\0\2\u012f\137\0\2\u0130\44\0\1\u0131"+
    "\137\0\2\u0132\113\0\2\u0133\1\u0134\144\0\1\u0135\74\0"+
    "\2\u0136\45\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\1\u0137\14\4\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\1\u0138"+
    "\14\4\1\0\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\46\0\1\u0139\114\0\1\u013a\126\0\2\u013b\106\0"+
    "\2\u013c\61\0\1\u013d\175\0\2\u013e\52\0\1\u013f\126\0"+
    "\2\u0140\102\0\2\u0141\115\0\2\u0142\122\0\2\u0143\102\0"+
    "\2\u0144\103\0\2\u0145\134\0\2\u0146\61\0\1\u0147\137\0"+
    "\2\u0148\57\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\1\4\1\u0149\13\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\1\4\1\u014a\13\4\1\0\7\4\3\0\14\4\1\0"+
    "\4\4\2\0\2\4\74\0\2\u014b\1\0\1\u014c\107\0"+
    "\2\u014d\76\0\1\u014e\141\0\2\u014f\52\0\1\u0150\105\0"+
    "\2\u0151\163\0\2\u0152\52\0\1\u0153\121\0\1\u0154\121\0"+
    "\2\u0155\113\0\2\u0156\102\0\2\u0157\61\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\4\4"+
    "\2\u0158\7\4\1\0\7\4\3\0\14\4\1\0\4\4"+
    "\2\0\2\4\10\0\2\4\1\67\1\0\2\4\3\0"+
    "\1\4\10\0\2\4\4\0\4\4\2\u0159\7\4\1\0"+
    "\7\4\3\0\14\4\1\0\4\4\2\0\2\4\76\0"+
    "\1\u015a\74\0\2\u015b\103\0\1\u015c\140\0\2\u015d\61\0"+
    "\1\u015e\146\0\2\u015f\67\0\1\u0160\150\0\2\u0161\52\0"+
    "\1\u0162\63\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\6\4\1\u0163\6\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\4\4\0"+
    "\6\4\1\u0164\6\4\1\0\7\4\3\0\14\4\1\0"+
    "\4\4\2\0\2\4\21\0\1\u0165\137\0\2\u0166\124\0"+
    "\1\u0167\105\0\1\u0168\121\0\2\u0169\106\0\1\u016a\115\0"+
    "\2\u016b\136\0\2\u016c\31\0\2\4\1\67\1\0\2\4"+
    "\3\0\1\4\10\0\2\u016d\4\0\15\4\1\0\7\4"+
    "\3\0\14\4\1\0\4\4\2\0\2\4\10\0\2\4"+
    "\1\67\1\0\2\4\3\0\1\4\10\0\2\u016e\4\0"+
    "\15\4\1\0\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\53\0\2\u016f\102\0\2\u0170\117\0\1\u0171\114\0"+
    "\1\u0172\56\0\2\4\1\67\1\0\2\4\3\0\1\4"+
    "\10\0\2\4\4\0\13\4\2\u0173\1\0\7\4\3\0"+
    "\14\4\1\0\4\4\2\0\2\4\10\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\13\4"+
    "\2\u0174\1\0\7\4\3\0\14\4\1\0\4\4\2\0"+
    "\2\4\102\0\2\u0175\52\0\1\u0176\63\0\2\4\1\67"+
    "\1\0\2\4\3\0\1\4\10\0\2\4\4\0\15\4"+
    "\1\u0177\7\4\3\0\14\4\1\0\4\4\2\0\2\4"+
    "\10\0\2\4\1\67\1\0\2\4\3\0\1\4\10\0"+
    "\2\4\4\0\15\4\1\u0178\7\4\3\0\14\4\1\0"+
    "\4\4\2\0\2\4\72\0\2\u0179\76\0\1\u017a\105\0"+
    "\1\u017b\123\0\1\u017c\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22638];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\20\1\1\11\2\1\1\11"+
    "\4\1\7\11\1\1\3\0\14\1\1\11\3\0\1\11"+
    "\2\0\1\11\2\1\3\0\5\11\7\1\25\0\1\11"+
    "\1\0\17\1\3\0\7\1\31\0\5\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\33\0\3\1\4\11"+
    "\7\0\1\11\4\0\1\11\3\0\1\11\10\0\2\1"+
    "\2\0\1\11\6\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\11\3\0\1\11\2\0\2\1\1\0\1\11"+
    "\6\0\1\11\4\0\2\11\5\0\2\1\12\0\1\11"+
    "\5\0\2\11\2\1\20\0\2\1\4\11\14\0\2\1"+
    "\3\0\1\11\1\0\1\11\2\0\2\11\3\0\2\1"+
    "\10\0\1\11\2\1\2\0\2\11\1\0\2\11\1\0"+
    "\2\1\2\0\2\11\2\1\2\0\2\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  @SuppressWarnings("unused")
private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  @SuppressWarnings("unused")
private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  @SuppressWarnings("unused")
private boolean zzEOFDone;

  /* user code: */
	 /** Holds a source reference */
	private String source;
  	private Stack<PXStylesheetLexeme> lexemeStack;
  	
	public PXStylesheetLexer() {
		this((Reader) null);
	}

	private PXStylesheetLexeme createLexeme(PXStylesheetTokenType type) {
		return createLexeme(type, yytext());
	}
	
	private PXStylesheetLexeme createLexeme(PXStylesheetTokenType type, Object value) {
		PXStylesheetLexeme result = new PXStylesheetLexeme(type, yychar, yylength(), value);

		if (yychar > 0) {
			char c = source.charAt(yychar - 1);

			if (Character.isWhitespace(c)) {
				result.setFlag(Lexeme.FLAG_TYPE_FOLLOWS_WHITESPACE);
			}
		}

		return result;
	}

	private PXDimension createDimension(String source, String units) {
		String numberString = source.substring(0, source.length() - units.length());

		return new PXDimension(Float.parseFloat(numberString), units);
	}

	private PXStylesheetLexeme createURLLexeme() {
		String source = yytext();
		int start = 4;
		int end = source.length() - 1;

		// skip leading whitespace
		while (start < end && Character.isWhitespace(source.charAt(start))) {
			start++;
		}

		// skip trailing whitespace
		while (end >= start && Character.isWhitespace(source.charAt(end - 1))) {
			end--;
		}

		// grab possible leading quote
		char firstChar = source.charAt(start);

		// trim off quotes if we have them and if they match
		if ((firstChar == '\'' || firstChar == '"') && source.charAt(end - 1) == firstChar) {
			start++;
			end--;
		}

		return createLexeme(PXStylesheetTokenType.URL, source.substring(start, end));
	}

	public PXStylesheetLexeme nextLexeme() {
		PXStylesheetLexeme result = null;
		
		if (lexemeStack != null && !lexemeStack.isEmpty()) {
			result = lexemeStack.pop();
		}
		else {
			try {
				result = yylex();
			} 
			catch (Exception e) {
				e.printStackTrace();
			}
		}

		return result;
	}

	public void setSource(String source) {
		this.source = source;
		yyreset(new StringReader(source));
	}
	
	public String getSource() {
		return source;
	}
	
	public void pushLexeme(PXStylesheetLexeme lexeme) {
		if (lexeme != null) {
			if (lexemeStack == null) {
				lexemeStack = new Stack<PXStylesheetLexeme>();
			}
			
			lexemeStack.push(lexeme);
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PXStylesheetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PXStylesheetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PXStylesheetLexeme yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 90: 
          { return createLexeme(PXStylesheetTokenType.NTH_LAST_CHILD_PSEUDO_CLASS);
          }
        case 92: break;
        case 21: 
          { return createLexeme(PXStylesheetTokenType.COMMA);
          }
        case 93: break;
        case 34: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "in"));
          }
        case 94: break;
        case 46: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "dpx"));
          }
        case 95: break;
        case 69: 
          { return createLexeme(PXStylesheetTokenType.BEFORE_PSEUDO_ELEMENT);
          }
        case 96: break;
        case 36: 
          { return createLexeme(PXStylesheetTokenType.EXS, createDimension(yytext(), "ex"));
          }
        case 97: break;
        case 67: 
          { return createLexeme(PXStylesheetTokenType.ACTIVE_PSEUDO_CLASS);
          }
        case 98: break;
        case 66: 
          { return createLexeme(PXStylesheetTokenType.IMPORT);
          }
        case 99: break;
        case 58: 
          { return createLexeme(PXStylesheetTokenType.LINK_PSEUDO_CLASS);
          }
        case 100: break;
        case 89: 
          { return createLexeme(PXStylesheetTokenType.RADIAL_GRADIENT);
          }
        case 101: break;
        case 19: 
          { return createLexeme(PXStylesheetTokenType.SEMICOLON);
          }
        case 102: break;
        case 33: 
          { return createLexeme(PXStylesheetTokenType.DOUBLE_COLON);
          }
        case 103: break;
        case 28: 
          { return createLexeme(PXStylesheetTokenType.LIST_CONTAINS);
          }
        case 104: break;
        case 64: 
          { return createLexeme(PXStylesheetTokenType.HOVER_PSEUDO_CLASS);
          }
        case 105: break;
        case 32: 
          { return createLexeme(PXStylesheetTokenType.ID);
          }
        case 106: break;
        case 41: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "pc"));
          }
        case 107: break;
        case 15: 
          { return createLexeme(PXStylesheetTokenType.LCURLY);
          }
        case 108: break;
        case 27: 
          { return createLexeme(PXStylesheetTokenType.CONTAINS);
          }
        case 109: break;
        case 25: 
          { return createLexeme(PXStylesheetTokenType.STRING);
          }
        case 110: break;
        case 42: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "px"));
          }
        case 111: break;
        case 63: 
          { return createLexeme(PXStylesheetTokenType.EMPTY_PSEUDO_CLASS);
          }
        case 112: break;
        case 50: 
          { return createLexeme(PXStylesheetTokenType.HSL);
          }
        case 113: break;
        case 37: 
          { return createLexeme(PXStylesheetTokenType.FREQUENCY, createDimension(yytext(), "Hz"));
          }
        case 114: break;
        case 43: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "cm"));
          }
        case 115: break;
        case 60: 
          { return createLexeme(PXStylesheetTokenType.MEDIA);
          }
        case 116: break;
        case 54: 
          { return createLexeme(PXStylesheetTokenType.HSLA);
          }
        case 117: break;
        case 9: 
          { return createLexeme(PXStylesheetTokenType.NTH);
          }
        case 118: break;
        case 57: 
          { return createLexeme(PXStylesheetTokenType.NOT_PSEUDO_CLASS);
          }
        case 119: break;
        case 84: 
          { return createLexeme(PXStylesheetTokenType.ONLY_OF_TYPE_PSEUDO_CLASS);
          }
        case 120: break;
        case 61: 
          { return createLexeme(PXStylesheetTokenType.AFTER_PSEUDO_ELEMENT);
          }
        case 121: break;
        case 85: 
          { return createLexeme(PXStylesheetTokenType.FIRST_LETTER_PSEUDO_ELEMENT);
          }
        case 122: break;
        case 49: 
          { return createLexeme(PXStylesheetTokenType.RGB);
          }
        case 123: break;
        case 11: 
          { return createLexeme(PXStylesheetTokenType.PIPE);
          }
        case 124: break;
        case 26: 
          { return createLexeme(PXStylesheetTokenType.CLASS);
          }
        case 125: break;
        case 45: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "deg"));
          }
        case 126: break;
        case 71: 
          { return createLexeme(PXStylesheetTokenType.CHECKED_PSEUDO_CLASS);
          }
        case 127: break;
        case 73: 
          { return createLexeme(PXStylesheetTokenType.NAMESPACE);
          }
        case 128: break;
        case 82: 
          { return createLexeme(PXStylesheetTokenType.NTH_OF_TYPE_PSEUDO_CLASS);
          }
        case 129: break;
        case 6: 
          { return createLexeme(PXStylesheetTokenType.PLUS);
          }
        case 130: break;
        case 87: 
          { return createLexeme(PXStylesheetTokenType.FIRST_OF_TYPE_PSEUDO_CLASS);
          }
        case 131: break;
        case 79: 
          { return createLexeme(PXStylesheetTokenType.ONLY_CHILD_PSEUDO_CLASS);
          }
        case 132: break;
        case 74: 
          { return createLexeme(PXStylesheetTokenType.FONT_FACE);
          }
        case 133: break;
        case 51: 
          { return createLexeme(PXStylesheetTokenType.HSB);
          }
        case 134: break;
        case 76: 
          { return createLexeme(PXStylesheetTokenType.IMPORTANT);
          }
        case 135: break;
        case 65: 
          { return createLexeme(PXStylesheetTokenType.FOCUS_PSEUDO_CLASS);
          }
        case 136: break;
        case 62: 
          { return createLexeme(PXStylesheetTokenType.LANG_PSEUDO_CLASS);
          }
        case 137: break;
        case 48: 
          { return createLexeme(PXStylesheetTokenType.FREQUENCY, createDimension(yytext(), "kHz"));
          }
        case 138: break;
        case 56: 
          { return createURLLexeme();
          }
        case 139: break;
        case 77: 
          { return createLexeme(PXStylesheetTokenType.NTH_CHILD_PSEUDO_CLASS);
          }
        case 140: break;
        case 35: 
          { return createLexeme(PXStylesheetTokenType.EMS, createDimension(yytext(), "em"));
          }
        case 141: break;
        case 29: 
          { return createLexeme(PXStylesheetTokenType.EQUALS_WITH_HYPHEN);
          }
        case 142: break;
        case 81: 
          { return createLexeme(PXStylesheetTokenType.FIRST_CHILD_PSEUDO_CLASS);
          }
        case 143: break;
        case 44: 
          { return createLexeme(PXStylesheetTokenType.AND);
          }
        case 144: break;
        case 23: 
          { return createLexeme(PXStylesheetTokenType.TIME, createDimension(yytext(), "s"));
          }
        case 145: break;
        case 22: 
          { return createLexeme(PXStylesheetTokenType.DIMENSION);
          }
        case 146: break;
        case 2: 
          { return createLexeme(PXStylesheetTokenType.NUMBER);
          }
        case 147: break;
        case 75: 
          { return createLexeme(PXStylesheetTokenType.KEYFRAMES);
          }
        case 148: break;
        case 13: 
          { return createLexeme(PXStylesheetTokenType.RPAREN);
          }
        case 149: break;
        case 83: 
          { return createLexeme(PXStylesheetTokenType.LAST_OF_TYPE_PSEUDO_CLASS);
          }
        case 150: break;
        case 38: 
          { return createLexeme(PXStylesheetTokenType.TIME, createDimension(yytext(), "ms"));
          }
        case 151: break;
        case 17: 
          { return createLexeme(PXStylesheetTokenType.LBRACKET);
          }
        case 152: break;
        case 72: 
          { return createLexeme(PXStylesheetTokenType.VISITED_PSEUDO_CLASS);
          }
        case 153: break;
        case 78: 
          { return createLexeme(PXStylesheetTokenType.LAST_CHILD_PSEUDO_CLASS);
          }
        case 154: break;
        case 1: 
          { return createLexeme(PXStylesheetTokenType.ERROR);
          }
        case 155: break;
        case 3: 
          { return createLexeme(PXStylesheetTokenType.IDENTIFIER);
          }
        case 156: break;
        case 59: 
          { return createLexeme(PXStylesheetTokenType.ROOT_PSEUDO_CLASS);
          }
        case 157: break;
        case 80: 
          { return createLexeme(PXStylesheetTokenType.FIRST_LINE_PSEUDO_ELEMENT);
          }
        case 158: break;
        case 39: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "mm"));
          }
        case 159: break;
        case 68: 
          { return createLexeme(PXStylesheetTokenType.TARGET_PSEUDO_CLASS);
          }
        case 160: break;
        case 53: 
          { return createLexeme(PXStylesheetTokenType.RGBA);
          }
        case 161: break;
        case 14: 
          { return createLexeme(PXStylesheetTokenType.COLON);
          }
        case 162: break;
        case 5: 
          { /* ignore */
          }
        case 163: break;
        case 47: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "rad"));
          }
        case 164: break;
        case 10: 
          { return createLexeme(PXStylesheetTokenType.TILDE);
          }
        case 165: break;
        case 86: 
          { return createLexeme(PXStylesheetTokenType.INDETERMINATE_PSEUDO_CLASS);
          }
        case 166: break;
        case 4: 
          { return createLexeme(PXStylesheetTokenType.EQUAL);
          }
        case 167: break;
        case 88: 
          { return createLexeme(PXStylesheetTokenType.LINEAR_GRADIENT);
          }
        case 168: break;
        case 20: 
          { return createLexeme(PXStylesheetTokenType.GREATER_THAN);
          }
        case 169: break;
        case 12: 
          { return createLexeme(PXStylesheetTokenType.LPAREN);
          }
        case 170: break;
        case 31: 
          { return createLexeme(PXStylesheetTokenType.ENDS_WITH);
          }
        case 171: break;
        case 52: 
          { return createLexeme(PXStylesheetTokenType.ANGLE, createDimension(yytext(), "grad"));
          }
        case 172: break;
        case 70: 
          { return createLexeme(PXStylesheetTokenType.ENABLED_PSEUDO_CLASS);
          }
        case 173: break;
        case 7: 
          { return createLexeme(PXStylesheetTokenType.SLASH);
          }
        case 174: break;
        case 18: 
          { return createLexeme(PXStylesheetTokenType.RBRACKET);
          }
        case 175: break;
        case 16: 
          { return createLexeme(PXStylesheetTokenType.RCURLY);
          }
        case 176: break;
        case 8: 
          { return createLexeme(PXStylesheetTokenType.STAR);
          }
        case 177: break;
        case 40: 
          { return createLexeme(PXStylesheetTokenType.LENGTH, createDimension(yytext(), "pt"));
          }
        case 178: break;
        case 30: 
          { return createLexeme(PXStylesheetTokenType.STARTS_WITH);
          }
        case 179: break;
        case 24: 
          { return createLexeme(PXStylesheetTokenType.PERCENTAGE, createDimension(yytext(), "%"));
          }
        case 180: break;
        case 91: 
          { return createLexeme(PXStylesheetTokenType.NTH_LAST_OF_TYPE_PSEUDO_CLASS);
          }
        case 181: break;
        case 55: 
          { return createLexeme(PXStylesheetTokenType.HSBA);
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new PXStylesheetLexeme(PXStylesheetTokenType.EOF, yychar, 0, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
